\cancel mode verify	
! ... now overlaying coastal outline ...

! Description: Plot outlines of continents, countries, and/or states

!		        arg 1	      arg 2	   arg 3        arg 4
! Usage:   GO mp_land [continent_pen] ["basemap"] [country_pen] [state_pen]

! pens 	may be "0"(background), "1"(foreground), "thick"(same as pen 7),
!	"black", "red", "green", "blue", or 2-18.
! arg 2 may be "basemap", "overlay", "fast" (fast, 20e:20e overlay) or omitted

!	Note 1: A pen color of "black" will actually pen number 1
!		-- normally white if the window background is black
!	Note 2: An "N" for the continent pen means no continents
!		-- use this for the special case of geo-political
!		   overlay without continents.

! Example:
!   GO mp_land red        	  - overlay continents using red pen (2)
!   GO mp_land  10           - overlay continents using pen number 10
!   GO mp_land 1 basemap     - basemap of continents outline in foreground color
!   GO mp_land 1 fast        - overlay continents in region 20e to 380, only
!   GO mp_land 1 " " red     - overlay continents with countries in red
!   GO mp_land thick basemap black black - continents, countries, and states
!   GO mp_land N " " 1 1     - overlay: no continents; yes political boundaries

! Notes:
!  1) If a pen value is given for the country_pen or state_pen then the
!	corresponding geopolitical boundaries will be drawn - else
!	they will be omitted
!  2) use  GO line_samples    to view the first 6 pen numbers
!       Higher pen numbers cycle with thicker lines (max 18)
!  3) For more control over basemaps use "GO basemap"
! 
! ACM 4/15 Fix ticket 2256: modulo replications for continents if argument 1 is not given

! test argument before performing any actions

query/ignore $2%default|basemap|overlay|fast|<argument 2 can be "basemap", "overlay", or "fast"%


! introduce the outline data set

! introduce the outline data set
set data/save
set grid/save

LET/QUIET mp_x = x
LET/QUIET mp_xmin = `mp_x[i=@min]`
LET/QUIET mp_xmax = `mp_x[i=@max]`
LET/QUIET mp_y = y
LET/QUIET mp_ymin = `mp_y[j=@min]`
LET/QUIET mp_ymax = `mp_y[j=@max]`
LET/QUIET mp_std_parallel_north = mp_ymax
LET/QUIET mp_std_parallel_south = mp_ymin

! This test will keep the central meridians defined by "from space" views
!
LET/QUIET mp_test = `mp_central_meridian` - `(mp_x[i=@max] + mp_x[i=@min])/2`
if `mp_test eq 0` then
   LET/QUIET mp_central_meridian = `(mp_x[i=@max] + mp_x[i=@min])/2`
endif
LET/QUIET mp_test = `mp_standard_parallel` - `(mp_y[j=@max] + mp_y[j=@min])/2`
if `mp_test eq 0` then
   LET/QUIET mp_standard_parallel = `(mp_y[j=@max] + mp_y[j=@min])/2`
endif
cancel variable mp_test

define region/default save
cancel region

use geo_borders

! Initialize
let landi_subx = 0
let landi_addx = 0
let landi_datxmin = continent_lon[x=@min]
let landi_datxmax = continent_lon[x=@max]

let landi_basemap = $2"0|basemap>1|*>0"
IF `landi_basemap EQ 0` THEN

   IF `mp_xmin LT landi_datxmin` then let landi_subx = `landi_subx - 360`
   IF `mp_xmax GT landi_datxmax` then let landi_addx = `landi_addx + 360`

ENDIF
 
! always do the continents, unless they sent in N for the argment.

define symbol land_setting = $1"1|black>1|red>2|green>3|blue>4|lightblue>5|purple>6|thick>7|\
0>0|1>1|2>2|3>3|4>4|5>5|6>6|7>7|8>8|9>9|10>10|11>11|12>12|13>13|14>14|15>15|16>16|17>17|18>18|N>-1|*>-2"

if `($land_setting) ge 0` then

   define symbol land_colorqual=/color=($land_setting)/line

elif `($land_setting) eq -2` then

   define symbol land_arg = ($1)
   go land_arg_check

endif

if `($land_setting) ne -1` then 

   if `landi_basemap EQ 0` THEN define symbol land_colorqual = ($land_colorqual)/overlay

   let/quiet mp_lambda = if (continent_LON ge mp_xmin and continent_LON le mp_xmax and continent_LAT ge mp_ymin and continent_LAT le mp_ymax) then (continent_LON * deg2rad)
   let/quiet mp_phi = if (continent_LON ge mp_xmin and continent_LON le mp_xmax and continent_LAT ge mp_ymin and continent_LAT le mp_ymax) then (continent_LAT * deg2rad)
   let/quiet masked_x_page = mp_mask * x_page
   let/quiet masked_y_page = mp_mask * y_page

   PLOT/vs/nolab/noax/($land_colorqual) masked_x_page, masked_y_page

! Draw any lines outside 0 to 360

IF `landi_addx NE 0` THEN 
     set grid continent_lon
     let/quiet mp_lambda = if ((continent_lon+landi_addx) ge mp_xmin and (continent_lon+landi_addx) le mp_xmax and \
      continent_lat ge mp_ymin and continent_lat le mp_ymax) then ((continent_lon+landi_addx) * deg2rad)
     let/quiet mp_phi = if ((continent_lon+landi_addx) ge mp_xmin and (continent_lon+landi_addx) le mp_xmax and \
      continent_lat ge mp_ymin and continent_lat le mp_ymax) then (continent_lat * deg2rad)
     let/quiet masked_x_page = mp_mask * x_page
     let/quiet masked_y_page = mp_mask * y_page
     
      plot($land_colorqual)/vs/nolab/noax masked_x_page, masked_y_page
   
   ENDIF
   IF `landi_subx NE 0` THEN 
     set grid continent_lon
     let/quiet mp_lambda = if ((continent_lon+landi_subx) ge mp_xmin and (continent_lon+landi_subx) le mp_xmax and \
      continent_lat ge mp_ymin and continent_lat le mp_ymax) then ((continent_lon+landi_subx) * deg2rad)
     let/quiet mp_phi = if ((continent_lon+landi_subx) ge mp_xmin and (continent_lon+landi_subx) le mp_xmax and \
      continent_lat ge mp_ymin and continent_lat le mp_ymax) then (continent_lat * deg2rad)
     let/quiet masked_x_page = mp_mask * x_page
     let/quiet masked_y_page = mp_mask * y_page
     
      plot($land_colorqual)/vs/nolab/noax masked_x_page, masked_y_page
   
   ENDIF

endif


! **** now the optional country borders


define symbol land_setting = $3"-1|black>1|red>2|green>3|blue>4|lightblue>5|purple>6|thick>7|\
0>0|1>1|2>2|3>3|4>4|5>5|6>6|7>7|8>8|9>9|10>10|11>11|12>12|13>13|14>14|15>15|16>16|17>17|18>18|N>-1|*>-2"

if `($land_setting) ge 0` then

   define symbol land_colorqual=/color=($land_setting)/line

elif `($land_setting) eq -2` then

   define symbol land_arg = ($3)
   go land_arg_check

endif

if `($land_setting) ne -1` then 
   set grid country_lon
   
   let/quiet mp_lambda = if (country_lon ge mp_xmin AND country_lon le mp_xmax AND \
     country_lat ge mp_ymin AND country_lat le mp_ymax) then (country_lon * deg2rad)
   let/quiet mp_phi = if (country_lon ge mp_xmin AND country_lon le mp_xmax AND \
     country_lat ge mp_ymin AND country_lat le mp_ymax) then (country_lat * deg2rad)

   let/quiet masked_x_page = mp_mask * x_page
   let/quiet masked_y_page = mp_mask * y_page

   PLOT($land_colorqual)/vs/nolab/overlay masked_x_page, masked_y_page
   
   ! Draw any lines outside 0 to 360
   
   if `landi_addx NE 0` THEN 

     let/quiet mp_lambda = if ((country_lon+landi_addx) ge mp_xmin AND (country_lon+landi_addx) le mp_xmax AND \
      country_lat ge mp_ymin AND country_lat le mp_ymax) then ((country_lon+landi_addx) * deg2rad)
     let/quiet mp_phi = if ((country_lon+landi_addx) ge mp_xmin AND (country_lon+landi_addx) le mp_xmax AND \
      country_lat ge mp_ymin AND country_lat le mp_ymax) then (country_lat * deg2rad)
     let/quiet masked_x_page = mp_mask * x_page
     let/quiet masked_y_page = mp_mask * y_page

     PLOT($land_colorqual)/vs/nolab/noax masked_x_page, masked_y_page
   endif

   if `landi_subx NE 0` THEN 

     let/quiet mp_lambda = if ((country_lon+landi_subx) ge mp_xmin AND (country_lon+landi_subx) le mp_xmax AND \
      country_lat ge mp_ymin AND country_lat le mp_ymax) then ((country_lon+landi_subx) * deg2rad)
     let/quiet mp_phi = if ((country_lon+landi_subx) ge mp_xmin AND (country_lon+landi_subx) le mp_xmax AND \
      country_lat ge mp_ymin AND country_lat le mp_ymax) then (country_lat * deg2rad)

     let/quiet masked_x_page = mp_mask * x_page
     let/quiet masked_y_page = mp_mask * y_page

     PLOT($land_colorqual)/vs/nolab/noax/overlay masked_x_page, masked_y_page

   endif
   
endif

! **** now the optional state borders


define symbol land_setting = $4"-1|black>1|red>2|green>3|blue>4|lightblue>5|purple>6|thick>7|\
0>0|1>1|2>2|3>3|4>4|5>5|6>6|7>7|8>8|9>9|10>10|11>11|12>12|13>13|14>14|15>15|16>16|17>17|18>18|N>-1|*>-2"

if `($land_setting) ge 0` then

   define symbol land_colorqual=/color=($land_setting)/line

elif `($land_setting) eq -2` then

   define symbol land_arg = ($4)
   go land_arg_check

endif

if `($land_setting) ne -1` then 
   set grid state_lon

   let/quiet mp_lambda = if (state_lon ge mp_xmin AND state_lon le mp_xmax AND  \
      state_lat ge mp_ymin AND state_lat le mp_ymax) then (state_lon * deg2rad)
   let/quiet mp_phi = if (state_lon ge mp_xmin AND state_lon le mp_xmax AND  \
      state_lat ge mp_ymin AND state_lat le mp_ymax) then (state_lat * deg2rad)

   let/quiet masked_x_page = mp_mask * x_page
   let/quiet masked_y_page = mp_mask * y_page

   PLOT($land_colorqual)/vs/nolab/overlay masked_x_page, masked_y_page
   
   ! Draw any lines outside 0 to 360

   if `landi_addx NE 0` THEN 

     let/quiet mp_lambda = if ((state_lon+landi_addx) ge mp_xmin AND (state_lon+landi_addx) le mp_xmax AND \
      state_lat ge mp_ymin AND state_lat le mp_ymax) then ((state_lon+landi_addx) * deg2rad)
     let/quiet mp_phi = if ((state_lon+landi_addx) ge mp_xmin AND (state_lon+landi_addx) le mp_xmax AND \
      state_lat ge mp_ymin AND state_lat le mp_ymax) then (state_lat * deg2rad)
     let/quiet masked_x_page = mp_mask * x_page
     let/quiet masked_y_page = mp_mask * y_page

     plot($land_colorqual)/vs/nolab/noax/overlay masked_x_page, masked_y_page

   endif

   if `landi_subx NE 0` THEN 

     let/quiet mp_lambda = if ((state_lon+landi_subx) ge mp_xmin AND (state_lon+landi_subx) le mp_xmax AND \
      state_lat ge mp_ymin AND state_lat le mp_ymax) then ((state_lon+landi_subx) * deg2rad)
     let/quiet mp_phi = if ((state_lon+landi_subx) ge mp_xmin AND (state_lon+landi_subx) le mp_xmax AND \
      state_lat ge mp_ymin AND state_lat le mp_ymax) then (state_lat * deg2rad)
     let/quiet masked_x_page = mp_mask * x_page
     let/quiet masked_y_page = mp_mask * y_page

     PLOT($land_colorqual)/vs/nolab/noax/overlay masked_x_page, masked_y_page

   endif
   
   endif  ! lines outside 0 to 360

cancel data geo_borders

set grid/restore
set data/restore
let/quiet mp_x = x
let/quiet mp_y = y
let/quiet mp_test = `mp_central_meridian` - `(mp_x[i=@max] + mp_x[i=@min])/2`
if `mp_test eq 0` then
   let/quiet mp_central_meridian = (mp_x[i=@max] + mp_x[i=@min])/2
endif
let/quiet mp_test = `mp_standard_parallel` - `(mp_y[j=@max] + mp_y[j=@min])/2`
if `mp_test eq 0` then
   let/quiet mp_standard_parallel = (mp_y[j=@max] + mp_y[j=@min])/2
endif
cancel variable mp_test
let/quiet mp_std_parallel_north = mp_y[j=@max]
let/quiet mp_std_parallel_south = mp_y[j=@min]
let/quiet mp_lambda = mp_x * deg2rad
let/quiet mp_phi = mp_y * deg2rad

set region save
set mode/last verify
