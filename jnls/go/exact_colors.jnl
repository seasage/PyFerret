\cancel mode verify
! exact_colors.jnl  *sh* 5/93
! updated 10/93 for Ferret V3.01
! fixed error in "SET MODE/LAST VERIFY" 12/95

! Description: Setup FERRET and PLOT+ to modify single SHADE or CONT colors

say For detailed instructions examine the file  $FER_DIR/go/exact_colors.jnl

! Usage:   GO exact_colors #_of_colors  [input_spectrum] [output_filename]
! sample:  GO exact_colors 12 rnb rnb12.save
! defaults:  input_spectrum = default.spk   output_filename = exact_colors.spk

! The colors specified with the PLOT+ SHASET command (& w/ spectrum files)
! define points in an abstract color space that runs from 0 to 100 percent.
! The actual colors used by SHADE or FILL are determined by dividing this
! abstract color scale into n equal percentage increments, where n is the
! number of colors, and linearly interpolating between the SHASET values.
! -- this is true when using /levels=n to specify an approximate number of
! colors to be used, or when /levels=(lo,hi,delta) is used. This script returns
! the same colors used on the plot only when the levels are a simple interpolation
! of all the colors in the palette onto a set of equally spaced levels.

! exact_colors.jnl determines the actual RGB values for each SHADE or FILL
! color and writes those results to exact_colors.spk (or the specified output
! file).  The command "PALETTE exact_colors" is then used to make
! those colors the current SHASET values thereby eliminating the abstraction
! of the color scale.  Thereafter modifying any individual SHASET color will
! change only one unique SHADE or FILL color on the display.

! FERRET example 1:
!	yes? SET DATA levitus_climatology	! distributed with ferret
!	yes? SET REGION/Z=0/Y=60S:60N
!	yes? SHADE/lev=(0,30,2) temp   ! 15 colors (16 levels)
!	yes? GO exact_colors 15        ! (saves results in exact_colors.spk)
!	yes? PPL LIST SHASET           ! notice there are 15 shaset points
!	yes? PPL SHASET 50 100 100 100 ! change one of the colors to white
!	
! FERRET example 2:
!       If you use the qualifier /PALETTE= to control the colors of a plot
!	FERRET changes the SHASET colors only for the moment of the plot.  As
!	soon as the plot is on the screen FERRET "protects" the colors on 
!	screen and restores the previous SHASET colors.  If you wish to
!	modify the colors on the screen after this you must "unprotect"
!	them with
!		yes? PPL SHASET RESET
! e.g.
!	yes? SET DATA levitus_climatology
!	yes? SET REGION/Z=0/Y=60S:60N
!	yes? SHADE/lev=(0,30,2)/PALETTE=greyscale temp
!	yes? GO exact_colors 15 greyscale	! spectrum file "greyscale.spk"
!	yes? PPL LIST SHASET
!	yes? PPL SHASET RESET			! unprotect the colors
!	yes? PPL SHASET 50.0 100 0 0            ! change one a color to red

alias argcheck "CANCEL EXPRESSION"        ! a no-op used to check arguments
argcheck $1"<Must specify number of colors on screen.  Usage:GO exact_colors n"

cancel region/x

! read the specified input spectrum name (Default:$FER_PALETTE/default.spk)
! using its "percentage" variable as the data set axis

file/form=delim/delim="\b"/var="text1,text2"/type="text,text"  "$FER_PALETTE/$2&default&.spk"
let ntext = `text1,return=isize`

! Find the first line that starts with 0.  There may be comments at the top
! Also check that if there is a RGB_Mapping specifier in the palette, that it
! is defining a percent palette.

define symbol rgb_map = percent
repeat/range=1:`ntext`/name=q (\
define symbol q = `q`;\
if `substring(text1[i=($q)],1,1) EQ "0"` then exit/loop;\
if `substring(upcase(text1[i=($q)]),1,11) EQ "RGB_MAPPING" and \
    substring(upcase(text2[i=($q)]),1,8) EQ "BY_LEVEL"` then define symbol rgb_map = by_level;\
if `substring(upcase(text1[i=($q)]),1,20) EQ "RGB_MAPPING" and \
    substring(upcase(text2[i=($q)]),1,8) EQ "BY_VALUE"` then define symbol rgb_map = by_value;\
if ($rgb_map"0|percent>0|by_level>1|by_value>1|*>0") then exit/loop;\
)

IF ($rgb_map"0|percent>0|by_level>1|by_value>1|*>0") then 
  say 
  say The exact_colors script is only for palettes defined by percent.
  say ($2) is a defined as a RGB_Mapping ($rgb_map) palette. Exiting.
  say 
  exit/script
ENDIF

let nskip = `($q)-1`

file/skip=`nskip`/var=pcentin,redin,greenin,bluein "$FER_PALETTE/$2&default&.spk"
define axis/from/x/name=axin pcentin
define grid/x=axin  gin
cancel data/noerr $2&default&.spk
file/skip=`nskip`/var=pcentin,redin,greenin,bluein/grid=gin "$FER_PALETTE/$2&default&.spk"

! number of desired colors 
let percent = 100*(i-1)/($1-1) 

! split the 0 to 100% range into n equally-spaced regions
! using gx=axout linear-interpolation regridding

define axis/from/x/name=axout percent[i=1:$1]
let pcentout = x[gx=axout]
let redout   = redin[gx=axout]    ! linear interpolation
let greenout = greenin[gx=axout]  ! linear interpolation
let blueout  = bluein[gx=axout]   ! linear interpolation

spawn rm -f $3"exact_colors.spk"
! note: output precision restricted to 1 decimal place consistent with PLOT+ 
list/file=$3"exact_colors.spk"/nohead/format=(4F10.1)/i=1:$1 pcentout,redout,greenout,blueout

say The file exact_colors.spk contains the (percent, red, green, blue) colors used in the color plot
say

set mode/last verify

